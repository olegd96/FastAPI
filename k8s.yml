apiVersion: v1
kind: ConfigMap
metadata:
  name: booking-config
data:
  MODE: "DEV"
  LOG_LEVEL: "INFO"

  BROKER_HOST: "rabbit"
  BROKER_PORT: "5672"
  BROKER_USER: "guest"
  BROKER_PASSWORD: "guest"

  DB_HOST: "booking-db"
  DB_PORT: "5431"
  DB_USER: "postgres"
  DB_PASS: "postgres"
  DB_NAME: "postgres"
  POSTGRES_PASSWORD: "postgres"

  TEST_DB_HOST: "localhost"
  TEST_DB_PORT: "5432"
  TEST_DB_USER: "postgres"
  TEST_DB_PASS: "postgres"
  TEST_DB_NAME: "test_booking_db"

  MONGO_HOST: "mongodb"
  MONGO_PORT: "27017"
  MONGO_USER: "user"
  MONGO_PASSWORD: "user"
  MONGO_NAME: "mongodb"

  SECRET_KEY: "lplg7ndrO/zNx8f+qq235t+8qjXwDXZEWGo5Rt7TN3w="
  ALGORITHM: "HS256" 
  SMTP_HOST: "smtp.yandex.ru"
  SMTP_PORT: "465"
  SMTP_USER: "chepalin@yandex.ru"
  SMTP_PASS: "qguoiyjvhflybmkg"

  REDIS_HOST: "booking-redis"
  REDIS_PORT: "6379"

  S3_HOST: "s3.timeweb.cloud"
  S3_ACCESS_KEY: "NO6Y9R3AWF6BPMOJI8FP"
  S3_SECRET_KEY: "PbBHHdwz98QQgfsXJ9AHFOO371GSIl2iT7Qjdakx"
  S3_BUCKET_NAME: "adde0948-deb57af2-1cc7-43e1-8268-403742f42ac7"

  FLOWER_BASIC_AUTH: "admin:ozonator"


---

# apiVersion: v1
# kind: LimitRange
# metadata:
#   name: cpu-resource-constraint
# spec:
#   limits:
#     - type: "Pod"
#       max:
#         cpu: "500m"
#         memory: "4Gi"
#       min:
#         cpu: "10m"
#         memory: "5Mi"
#     - type: "Container"
#       max:
#         cpu: "500m"
#         memory: "4Gi"
#       min:
#         cpu: "10m"
#         memory: "5Mi"
#       default:
#         cpu: "100m"
#         memory: "100Mi"

# ---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: booking-app-ingress
  namespace: booking
  
  annotations:
    nginx.org/proxy-connect-timeout: "30s"
    nginx.org/proxy-read-timeout: "20s"
    nginx.org/proxy-set-headers: "Host: $http_host, X-Forwarded-For: $proxy_add_x_forwarded_for, X-Forwarded-Proto: $scheme, Upgrade: $http_upgrade"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-redirect-from: "off"
    nginx.ingress.kubernetes.io/proxy-redirect-to: "off"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/add-base-url : "true"
    kubernetes.io/ingress.class: public
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.org/server-snippets: |
      location /chat/ws/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
      }
      
      location /images/hotels {
            client_max_body_size 10M;
            proxy_buffering on;
      }
      location /static {
            proxy_pass http://booking:8000/static;
      }
spec:
  rules:
  - host: booking.it
    http:
      paths:
      - path: /(flower/.*)
        pathType: Prefix
        backend:
          service:
            name: booking-celery-app
            port:
              number: 5555
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: booking
            port:
              number: 8000
            

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: booking-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"


---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: booking-pv-volume-1
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/images"

---


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: booking-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi


---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: booking-pv-claim-1
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     tier: nginx
#   name: nginx
# spec:
#   selector:
#     tier: nginx
#   ports:
#     - name: http
#       port: 70
#       targetPort: 80
#       protocol: TCP
#     - name: https
#       port: 443
#       targetPort: 443
#       protocol: TCP


---

apiVersion: v1
kind: Service
metadata:
  labels:
    tier: booking-db
    app: booking-app
  name: booking-db
spec:
  selector:
    tier: booking-db
  ports:
  - nodePort: 30000
    port: 5431
    targetPort: 5432
    protocol: TCP
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  labels:
    tier: booking-redis
    app: booking-app
  name: booking-redis
spec:
  selector:
    tier: booking-redis
  ports:
  - port: 6379
    protocol: TCP
    targetPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  labels:
    tier: booking
    app: booking-app
  name: booking
spec:
  selector:
    tier: booking
  ports:
    - nodePort: 30002
      port: 8000
      targetPort: 8000
      protocol: TCP
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  labels:
    tier: booking-celery-app
    app: booking-app
  name: booking-celery-app
spec:
  selector:
    tier: booking-celery-app
  ports:
    - nodePort: 30005
      port: 5555
      targetPort: 5555
      protocol: TCP
  type: NodePort

---

# apiVersion: v1
# kind: Deployment
# metadata:
#   name: nginx
#   labels:
#     tier: nginx
# spec:
#   selector:
#     matchLabels:
#       tier: nginx
#   template:
#     metadata:
#       labels:
#         tier: nginx
#     spec:
#       containers:
#         - name: booking_nginx
#           image: localhost:32000/booking_nginx:latest
#           ports:
#             - containerPort: 80
#             - containerPort: 443
#           resources:
#             limits:
#               memory: "128Mi"
#               cpu: "500m"
#             requests:
#               memory: "128Mi"
#               cpu: "50m"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-db
  labels:
    tier: booking-db
    app: booking-app
spec:
  selector:
    matchLabels:
      tier: booking-db
  template:
    metadata:
      labels:
        tier: booking-db
    spec:
      volumes:
        - name: booking-pv-storage
          persistentVolumeClaim:
            claimName: booking-pv-claim
      containers:
        - name: booking-db
          image: postgres:15
          envFrom:
            - configMapRef:
                name: booking-config
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: booking-pv-storage
              mountPath: /var/lib/postgresql/data

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-redis
  labels:
    tier: booking-redis
    app: booking-app
spec:
  selector:
    matchLabels:
      tier: booking-redis
  template:
    metadata:
      labels:
        tier: booking-redis
    spec:
      containers:
      - name: booking-redis
        image: redis:7
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "128Mi"
            cpu: "50m"
        ports:
        - containerPort: 6379
          protocol: TCP


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking
  labels:
    tier: booking
    app: booking-app
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: booking
  template:
    metadata:
      labels:
        tier: booking
    spec:
      
      volumes:
        - name: booking-pv-storage-1
          persistentVolumeClaim:
            claimName: booking-pv-claim-1
      containers:
        - name: booking
          image: localhost:32000/booking_app:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: booking-config
          command: ["/bin/sh", "-c"]
          args: ['alembic upgrade head && gunicorn app.main:app --workers 1 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000']
          readinessProbe:
              httpGet:
                path: /pages
                port: 8000
              initialDelaySeconds: 5
              periodSeconds: 3
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - name: booking-pv-storage-1
              mountPath: ~/booking/app/static/images


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-celery-app
  labels:
    tier: booking-celery-app
    app: booking-app
spec:
  selector:
    matchLabels:
      tier: booking-celery-app
  template:
    metadata:
      labels:
        tier: booking-celery-app
    spec:
      volumes:
        - name: booking-pv-storage-1
          persistentVolumeClaim:
            claimName: booking-pv-claim-1
      containers:
        - name: booking-celery
          imagePullPolicy: Always
          image: localhost:32000/booking_app:latest
          envFrom:
            - configMapRef:
                name: booking-config
          command: ["/bin/sh", "-c"]
          args: ['celery --app=app.tasks.celery:celery worker -l INFO']
          resources:
            limits:
              memory: "3Gi"
              cpu: "500m"
          # livenessProbe:
          #   exec:
          #     # bash is needed to replace the environment variable
          #     command: [
          #       "bash",
          #       "-c",
          #       "celery -A app.tasks.celery inspect ping  -d celery@$HOSTNAME"
          #     ]
          #   initialDelaySeconds: 30
          #   periodSeconds: 60     
          volumeMounts:
            - name: booking-pv-storage-1
              mountPath: ~/booking/app/static/images     
        - name: booking-celery-beat
          image: localhost:32000/booking_app:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: booking-config
          command: ["/bin/sh", "-c"]
          args: ['celery --app=app.tasks.celery:celery worker -l INFO -B']
          resources:
            limits:
              memory: "2Gi"
              cpu: "500m"
          volumeMounts:
            - name: booking-pv-storage-1
              mountPath: ~/booking
        - name: booking-flower
          image: localhost:32000/booking_app:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: booking-config
          command: ["/bin/sh", "-c"]
          args: ['celery --app=app.tasks.celery:celery flower --url_prefix=/flower']
          resources:
            limits:
              memory: "1Gi"
              cpu: "500m"
          ports:
            - containerPort: 5555
              protocol: TCP
